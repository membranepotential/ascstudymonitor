"""
Pagination info
"""
type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

"""
Author of a publication
"""
type Author {
  firstName: String
  lastName: String!
  publicationCount: Int!
}

"""
Author of a publication as input
"""
input AuthorInput {
  firstName: String
  lastName: String!
}

"""
The year of a publication
"""
type Year {
  value: Int!
  publicationCount: Int!
}

"""
An academic journal
"""
type Journal {
  value: String!
  publicationCount: Int!
}

"""
Discipline of a publication, assigned by the ASC Studymonitor editors
"""
type Discipline {
  value: String!
  publicationCount: Int!
}

"""
Keyword of a publication, usually assigned by the authors
"""
type Keyword {
  value: String!
  publicationCount: Int!
}

"""
A publication as listed in the study monitor
"""
type Publication {
  abstract: String!
  authors: [Author!]!
  created: String!
  disciplines: [Discipline!]!
  fileAttached: Boolean!
  id: ID!
  keywords: [Keyword!]!
  slug: String!
  journal: Journal
  title: String!
  websites: [String!]
  year: Year

  recommendations(first: Int!): [Recommendation!]!
  hasBeenPosted(channel: String!): Boolean!
}

"""
An edge in paginated publications
"""
type PublicationEdge {
  cursor: String!
  score: Float
  node: Publication
}

"""
Paginated publications
"""
type PublicationsConnection {
  edges: [PublicationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A recommendation with score
"""
type Recommendation {
  score: Float!
  publication: Publication
}

"""
Filters used when fetching publications
"""
input FilterInput {
  year: [Int!]
  journal: [String!]
  authors: [AuthorInput!]
  disciplines: [String!]
  keywords: [String!]
}

"""
Response for updating the publication store
"""
type UpdateResponse {
  success: Boolean!
  message: String
}

"""
Response for mutations on a queue
"""
type QueueMutationResponse {
  success: Boolean!
  message: String
  queue(channel: String!): [Publication!]
}

"""
Fields specific to a twitter post
"""
type TwitterResponse {
  hashtags: [String!]!
  urls: [String!]!
}

"""
Response for a post mutation.
Fields publication, created, postPayload, postID and response
may be null if post failed at some point
"""
type PostResponse {
  success: Boolean!
  message: String

  publication: ID
  created: String
  postPayload: String
  postID: String
  response: TwitterResponse
}

"""
A filterable field, returned as a filter suggestion
"""
union FilterableField = Year | Journal | Author | Discipline | Keyword

"""
A scored filter suggestion
"""
type FilterSuggestion {
  value: FilterableField!
  field: String!
  score: Float!
}

type Query {
  "Fetch paginated publications"
  publications(
    "Search query for fuzzy full text search in publications"
    search: String
    "Hard filters for publications"
    filters: FilterInput
    "Size of page, default: 25"
    first: Int
    "Cursor for page"
    after: String
  ): PublicationsConnection

  "Fetch publication by ID"
  publication(id: ID!): Publication

  "Fetch publication by slug"
  publicationBySlug(slug: String!): Publication

  "Get download Url for publication or null if publication has no attached files"
  publicationDownloadUrl(id: ID!): String

  "Find publication by first letters of title"
  publicationsByTitle(title: String!, first: Int): [Publication!]!

  "View the queue for a channel"
  queue(channel: String!): [Publication!]

  "Get suggestions for filters based on fuzzy search"
  fieldSuggestions(
    "Search query for fuzzy filter suggestions"
    search: String!
    "Maximum number of suggestions to return, default: 10"
    first: Int
    "If given, only returns suggestions if there is overlap with other filters"
    filters: FilterInput
  ): [FilterSuggestion!]!

  "Get infos for all years"
  years: [Year!]!

  "Get infos for all journals"
  journals: [Journal!]!

  "Get infos for all authors"
  authors: [Author!]!

  "Get infos for all disciplines"
  disciplines: [Discipline!]!

  "Get infos for all keywords"
  keywords: [Keyword!]!
}

type Mutation {
  "Fetch publications from Mendeley and update internal publication store "
  updatePublications: UpdateResponse!

  appendToQueue(channel: String!, publication: ID!): QueueMutationResponse!
  moveUpInQueue(channel: String!, publication: ID!): QueueMutationResponse!
  moveDownInQueue(channel: String!, publication: ID!): QueueMutationResponse!
  removeFromQueue(channel: String!, publication: ID!): QueueMutationResponse!

  "Take first publication from queue and post on channel, requires a secret token"
  post(channel: String!, secret: String!): PostResponse!
}
